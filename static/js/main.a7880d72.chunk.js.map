{"version":3,"sources":["1-lira-tura.png","1-lira-yazi.png","Coin.jsx","CoinFlipper.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Coin","props","react_default","a","createElement","className","concat","donuyor","src","CoinTura","side","CoinYazi","CoinFlipper","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","_this$state","state","yaziCount","turaCount","totalCount","setState","console","log","Math","random","setTimeout","src_Coin_0","onClick","Component","App","src_CoinFlipper_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yTCgBzBC,EAXF,SAACC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAC,OAAUL,EAAMM,QAAU,cAAgB,KACtDL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAUJ,UAA2B,SAAfJ,EAAMS,KAAkB,YAAc,eACtER,EAAAC,EAAAC,cAAA,OAAKI,IAAKG,IAAUN,UAA2B,SAAfJ,EAAMS,KAAkB,aAAe,iBC0ChEE,qBA9Cb,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KAWRmB,YAAc,WAAM,IAAAC,EACqBR,EAAKS,MAArCC,EADWF,EACXE,UAAUC,EADCH,EACDG,UAAUC,EADTJ,EACSI,WAE3BZ,EAAKa,SAAS,CAACD,WAAWA,EAAW,IACrCE,QAAQC,IAAIH,GAEZZ,EAAKa,SAAS,CAAEnB,SAAS,IAGTsB,KAAKC,SAEX,GAAKjB,EAAKa,SAAS,CAAChB,KAAK,OAAOa,UAAUA,EAAU,IAAIV,EAAKa,SAAS,CAAChB,KAAK,OAAOc,UAAUA,EAAU,IACjHO,WAAW,kBAAMlB,EAAKa,SAAS,CAAEnB,SAAS,KAAU,MApBpDM,EAAKS,MAAQ,CACXZ,KAAM,OACNH,SAAS,EACTkB,WAAW,EACXD,UAAU,EACVD,UAAU,GATKV,wEA4BjB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAC4B,EAAD,CAAMtB,KAAMM,KAAKM,MAAMZ,KAAMH,QAASS,KAAKM,MAAMf,UACjDL,EAAAC,EAAAC,cAAA,UAAQ6B,QAASjB,KAAKI,aAAtB,OACAlB,EAAAC,EAAAC,cAAA,kBAEEF,EAAAC,EAAAC,cAAA,kBAAUY,KAAKM,MAAMG,WAArB,KAFF,oBAIEvB,EAAAC,EAAAC,cAAA,kBAAUY,KAAKM,MAAME,UAArB,KAJF,YAKEtB,EAAAC,EAAAC,cAAA,kBAAUY,KAAKM,MAAMC,UAArB,KALF,+BAlCkBW,cCOXC,MARf,WACE,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a7880d72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1-lira-tura.7c42669a.png\";","module.exports = __webpack_public_path__ + \"static/media/1-lira-yazi.9b70882e.png\";","import React from 'react';\r\nimport './Coin.css';\r\nimport CoinTura from './1-lira-tura.png';\r\nimport CoinYazi from './1-lira-yazi.png';\r\n\r\nconst Coin = (props) => {\r\n  return (\r\n    <div className=\"Coin-container\">\r\n      <div className={`Coin ${props.donuyor ? 'Coin-rotate' : ''}`}>\r\n        <img src={CoinTura} className={(props.side === 'yazi' ? 'Coin-back' : 'Coin-front')} />\r\n        <img src={CoinYazi} className={(props.side === 'yazi' ? 'Coin-front' : 'Coin-back')} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Coin;\r\n","import React, { Component } from \"react\";\r\n// import Coin from './Coin';\r\nimport Coin from \"./Coin.jsx\";\r\nimport \"./CoinFlipper.css\";\r\n\r\nclass CoinFlipper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // State üzerinde paranın başlangıçtaki durumunu veriyoruz, başlangıçta \"tura\" olsun.\r\n    // Daha sonra şu anda paranın dönüp dönmeme durumunu da veriyoruz, başlangıçta para atılmamış olduğundan \"false\" olarak verdik.\r\n    this.state = {\r\n      side: \"tura\",\r\n      donuyor: false,\r\n      totalCount:0,\r\n      turaCount:0,\r\n      yaziCount:0\r\n    };\r\n  }\r\n  handleClick = () => {\r\n    const {yaziCount,turaCount,totalCount}=this.state;\r\n\r\n    this.setState({totalCount:totalCount+1});\r\n    console.log(totalCount);\r\n    // \"At!\" butonuna tıkladığımızda paranın dönmesini istiyoruz, bu yüzden \"donuyor\" durumunu \"true\" yapıyoruz.\r\n    this.setState({ donuyor: true });\r\n    // 1 saniye kadar dönmesi yeterli, bu yüzden 1 saniye sonra \"donuyor\" durmunu tekrar \"false\" yapıyoruz.\r\n\r\n    const randomNum=Math.random();\r\n    // console.log(randomNum);\r\n    randomNum>0.5? this.setState({side:\"yazi\",yaziCount:yaziCount+1}):this.setState({side:\"tura\",turaCount:turaCount+1});\r\n    setTimeout(() => this.setState({ donuyor: false }), 1000);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CoinFlipper\">\r\n        <h1>Yazı mı Tura mı?</h1>\r\n        <Coin side={this.state.side} donuyor={this.state.donuyor} />\r\n        <button onClick={this.handleClick}>At!</button>\r\n        <p>\r\n          Toplam\r\n          <strong> {this.state.totalCount} </strong>\r\n          atıştan\r\n          <strong> {this.state.turaCount} </strong>ü tura\r\n          <strong> {this.state.yaziCount} </strong>\r\n          si yazı geldi.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoinFlipper;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CoinFlipper from './CoinFlipper.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CoinFlipper />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}